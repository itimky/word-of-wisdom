// Code generated by mockery v2.10.2. DO NOT EDIT.

package mocks

import (
	guide "github.com/itimky/word-of-wisom/api/guide"
	mock "github.com/stretchr/testify/mock"

	server "github.com/itimky/word-of-wisom/api/server"
)

// TcpClient is an autogenerated mock type for the tcpClient type
type TcpClient struct {
	mock.Mock
}

type TcpClient_Expecter struct {
	mock *mock.Mock
}

func (_m *TcpClient) EXPECT() *TcpClient_Expecter {
	return &TcpClient_Expecter{mock: &_m.Mock}
}

// RequestGuideByIdx provides a mock function with given fields: idx, _a1
func (_m *TcpClient) RequestGuideByIdx(idx int, _a1 guide.RequestMsg) (*guide.ResponseMsg, error) {
	ret := _m.Called(idx, _a1)

	var r0 *guide.ResponseMsg
	if rf, ok := ret.Get(0).(func(int, guide.RequestMsg) *guide.ResponseMsg); ok {
		r0 = rf(idx, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*guide.ResponseMsg)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, guide.RequestMsg) error); ok {
		r1 = rf(idx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TcpClient_RequestGuideByIdx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RequestGuideByIdx'
type TcpClient_RequestGuideByIdx_Call struct {
	*mock.Call
}

// RequestGuideByIdx is a helper method to define mock.On call
//  - idx int
//  - _a1 guide.RequestMsg
func (_e *TcpClient_Expecter) RequestGuideByIdx(idx interface{}, _a1 interface{}) *TcpClient_RequestGuideByIdx_Call {
	return &TcpClient_RequestGuideByIdx_Call{Call: _e.mock.On("RequestGuideByIdx", idx, _a1)}
}

func (_c *TcpClient_RequestGuideByIdx_Call) Run(run func(idx int, _a1 guide.RequestMsg)) *TcpClient_RequestGuideByIdx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(guide.RequestMsg))
	})
	return _c
}

func (_c *TcpClient_RequestGuideByIdx_Call) Return(_a0 *guide.ResponseMsg, _a1 error) *TcpClient_RequestGuideByIdx_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// RequestServer provides a mock function with given fields: _a0
func (_m *TcpClient) RequestServer(_a0 server.RequestMsg) (*server.ResponseMsg, error) {
	ret := _m.Called(_a0)

	var r0 *server.ResponseMsg
	if rf, ok := ret.Get(0).(func(server.RequestMsg) *server.ResponseMsg); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*server.ResponseMsg)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(server.RequestMsg) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TcpClient_RequestServer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RequestServer'
type TcpClient_RequestServer_Call struct {
	*mock.Call
}

// RequestServer is a helper method to define mock.On call
//  - _a0 server.RequestMsg
func (_e *TcpClient_Expecter) RequestServer(_a0 interface{}) *TcpClient_RequestServer_Call {
	return &TcpClient_RequestServer_Call{Call: _e.mock.On("RequestServer", _a0)}
}

func (_c *TcpClient_RequestServer_Call) Run(run func(_a0 server.RequestMsg)) *TcpClient_RequestServer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(server.RequestMsg))
	})
	return _c
}

func (_c *TcpClient_RequestServer_Call) Return(_a0 *server.ResponseMsg, _a1 error) *TcpClient_RequestServer_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}
