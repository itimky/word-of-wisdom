// Code generated by mockery v2.10.2. DO NOT EDIT.

package mocks

import (
	gtp "github.com/itimky/word-of-wisom/pkg/gtp"
	mock "github.com/stretchr/testify/mock"
)

// HashCalc is an autogenerated mock type for the hashCalc type
type HashCalc struct {
	mock.Mock
}

type HashCalc_Expecter struct {
	mock *mock.Mock
}

func (_m *HashCalc) EXPECT() *HashCalc_Expecter {
	return &HashCalc_Expecter{mock: &_m.Mock}
}

// CalcInitialHash provides a mock function with given fields: clientIP, tourLength, secret
func (_m *HashCalc) CalcInitialHash(clientIP string, tourLength int, secret string) gtp.Hash {
	ret := _m.Called(clientIP, tourLength, secret)

	var r0 gtp.Hash
	if rf, ok := ret.Get(0).(func(string, int, string) gtp.Hash); ok {
		r0 = rf(clientIP, tourLength, secret)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(gtp.Hash)
		}
	}

	return r0
}

// HashCalc_CalcInitialHash_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CalcInitialHash'
type HashCalc_CalcInitialHash_Call struct {
	*mock.Call
}

// CalcInitialHash is a helper method to define mock.On call
//  - clientIP string
//  - tourLength int
//  - secret string
func (_e *HashCalc_Expecter) CalcInitialHash(clientIP interface{}, tourLength interface{}, secret interface{}) *HashCalc_CalcInitialHash_Call {
	return &HashCalc_CalcInitialHash_Call{Call: _e.mock.On("CalcInitialHash", clientIP, tourLength, secret)}
}

func (_c *HashCalc_CalcInitialHash_Call) Run(run func(clientIP string, tourLength int, secret string)) *HashCalc_CalcInitialHash_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(int), args[2].(string))
	})
	return _c
}

func (_c *HashCalc_CalcInitialHash_Call) Return(_a0 gtp.Hash) *HashCalc_CalcInitialHash_Call {
	_c.Call.Return(_a0)
	return _c
}

// VerifyHash provides a mock function with given fields: initialHash, lastHash, tourLength, clientIP, secret, guideSecrets
func (_m *HashCalc) VerifyHash(initialHash gtp.Hash, lastHash gtp.Hash, tourLength int, clientIP string, secret string, guideSecrets []string) bool {
	ret := _m.Called(initialHash, lastHash, tourLength, clientIP, secret, guideSecrets)

	var r0 bool
	if rf, ok := ret.Get(0).(func(gtp.Hash, gtp.Hash, int, string, string, []string) bool); ok {
		r0 = rf(initialHash, lastHash, tourLength, clientIP, secret, guideSecrets)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// HashCalc_VerifyHash_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VerifyHash'
type HashCalc_VerifyHash_Call struct {
	*mock.Call
}

// VerifyHash is a helper method to define mock.On call
//  - initialHash gtp.Hash
//  - lastHash gtp.Hash
//  - tourLength int
//  - clientIP string
//  - secret string
//  - guideSecrets []string
func (_e *HashCalc_Expecter) VerifyHash(initialHash interface{}, lastHash interface{}, tourLength interface{}, clientIP interface{}, secret interface{}, guideSecrets interface{}) *HashCalc_VerifyHash_Call {
	return &HashCalc_VerifyHash_Call{Call: _e.mock.On("VerifyHash", initialHash, lastHash, tourLength, clientIP, secret, guideSecrets)}
}

func (_c *HashCalc_VerifyHash_Call) Run(run func(initialHash gtp.Hash, lastHash gtp.Hash, tourLength int, clientIP string, secret string, guideSecrets []string)) *HashCalc_VerifyHash_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(gtp.Hash), args[1].(gtp.Hash), args[2].(int), args[3].(string), args[4].(string), args[5].([]string))
	})
	return _c
}

func (_c *HashCalc_VerifyHash_Call) Return(_a0 bool) *HashCalc_VerifyHash_Call {
	_c.Call.Return(_a0)
	return _c
}
