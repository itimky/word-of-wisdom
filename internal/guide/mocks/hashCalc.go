// Code generated by mockery v2.10.2. DO NOT EDIT.

package mocks

import (
	gtp "word-of-wisom/pkg/gtp"

	mock "github.com/stretchr/testify/mock"
)

// HashCalc is an autogenerated mock type for the hashCalc type
type HashCalc struct {
	mock.Mock
}

type HashCalc_Expecter struct {
	mock *mock.Mock
}

func (_m *HashCalc) EXPECT() *HashCalc_Expecter {
	return &HashCalc_Expecter{mock: &_m.Mock}
}

// CalcGuideHash provides a mock function with given fields: prevHash, tourNumber, tourLength, clientIP, secret
func (_m *HashCalc) CalcGuideHash(prevHash gtp.Hash, tourNumber int, tourLength int, clientIP string, secret string) gtp.Hash {
	ret := _m.Called(prevHash, tourNumber, tourLength, clientIP, secret)

	var r0 gtp.Hash
	if rf, ok := ret.Get(0).(func(gtp.Hash, int, int, string, string) gtp.Hash); ok {
		r0 = rf(prevHash, tourNumber, tourLength, clientIP, secret)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(gtp.Hash)
		}
	}

	return r0
}

// HashCalc_CalcGuideHash_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CalcGuideHash'
type HashCalc_CalcGuideHash_Call struct {
	*mock.Call
}

// CalcGuideHash is a helper method to define mock.On call
//  - prevHash gtp.Hash
//  - tourNumber int
//  - tourLength int
//  - clientIP string
//  - secret string
func (_e *HashCalc_Expecter) CalcGuideHash(prevHash interface{}, tourNumber interface{}, tourLength interface{}, clientIP interface{}, secret interface{}) *HashCalc_CalcGuideHash_Call {
	return &HashCalc_CalcGuideHash_Call{Call: _e.mock.On("CalcGuideHash", prevHash, tourNumber, tourLength, clientIP, secret)}
}

func (_c *HashCalc_CalcGuideHash_Call) Run(run func(prevHash gtp.Hash, tourNumber int, tourLength int, clientIP string, secret string)) *HashCalc_CalcGuideHash_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(gtp.Hash), args[1].(int), args[2].(int), args[3].(string), args[4].(string))
	})
	return _c
}

func (_c *HashCalc_CalcGuideHash_Call) Return(_a0 gtp.Hash) *HashCalc_CalcGuideHash_Call {
	_c.Call.Return(_a0)
	return _c
}
