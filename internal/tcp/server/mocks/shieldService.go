// Code generated by mockery v2.10.2. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	shield "github.com/itimky/word-of-wisom/internal/service/shield"
)

// ShieldService is an autogenerated mock type for the shieldService type
type ShieldService struct {
	mock.Mock
}

type ShieldService_Expecter struct {
	mock *mock.Mock
}

func (_m *ShieldService) EXPECT() *ShieldService_Expecter {
	return &ShieldService_Expecter{mock: &_m.Mock}
}

// HandleInitial provides a mock function with given fields: clientIP
func (_m *ShieldService) HandleInitial(clientIP string) shield.InitialResult {
	ret := _m.Called(clientIP)

	var r0 shield.InitialResult
	if rf, ok := ret.Get(0).(func(string) shield.InitialResult); ok {
		r0 = rf(clientIP)
	} else {
		r0 = ret.Get(0).(shield.InitialResult)
	}

	return r0
}

// ShieldService_HandleInitial_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HandleInitial'
type ShieldService_HandleInitial_Call struct {
	*mock.Call
}

// HandleInitial is a helper method to define mock.On call
//  - clientIP string
func (_e *ShieldService_Expecter) HandleInitial(clientIP interface{}) *ShieldService_HandleInitial_Call {
	return &ShieldService_HandleInitial_Call{Call: _e.mock.On("HandleInitial", clientIP)}
}

func (_c *ShieldService_HandleInitial_Call) Run(run func(clientIP string)) *ShieldService_HandleInitial_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ShieldService_HandleInitial_Call) Return(_a0 shield.InitialResult) *ShieldService_HandleInitial_Call {
	_c.Call.Return(_a0)
	return _c
}

// HandleTourComplete provides a mock function with given fields: clientIP, request
func (_m *ShieldService) HandleTourComplete(clientIP string, request shield.TourCompleteRequest) shield.TourCompleteResult {
	ret := _m.Called(clientIP, request)

	var r0 shield.TourCompleteResult
	if rf, ok := ret.Get(0).(func(string, shield.TourCompleteRequest) shield.TourCompleteResult); ok {
		r0 = rf(clientIP, request)
	} else {
		r0 = ret.Get(0).(shield.TourCompleteResult)
	}

	return r0
}

// ShieldService_HandleTourComplete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HandleTourComplete'
type ShieldService_HandleTourComplete_Call struct {
	*mock.Call
}

// HandleTourComplete is a helper method to define mock.On call
//  - clientIP string
//  - request shield.TourCompleteRequest
func (_e *ShieldService_Expecter) HandleTourComplete(clientIP interface{}, request interface{}) *ShieldService_HandleTourComplete_Call {
	return &ShieldService_HandleTourComplete_Call{Call: _e.mock.On("HandleTourComplete", clientIP, request)}
}

func (_c *ShieldService_HandleTourComplete_Call) Run(run func(clientIP string, request shield.TourCompleteRequest)) *ShieldService_HandleTourComplete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(shield.TourCompleteRequest))
	})
	return _c
}

func (_c *ShieldService_HandleTourComplete_Call) Return(_a0 shield.TourCompleteResult) *ShieldService_HandleTourComplete_Call {
	_c.Call.Return(_a0)
	return _c
}
